/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { config, useSpring, useTransition } from "@react-spring/three";
import { a } from '@react-spring/three'

type GLTFResult = GLTF & {
  nodes: {
    Mug: THREE.Mesh;
  };
  materials: {
    ["Material.006"]: THREE.MeshStandardMaterial;
  };
};

export function Mug(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/3dModels/mug.glb") as GLTFResult;
  const [pressed,setPressed] = useState(false)
  // const [springs, api] = useSpring(
  //   () => ({
  //     position: [0, 0,0],
  //     rotation: [0, 0,0],
  //     config: key => {
  //       switch (key) {
  //         case 'scale':
  //           return {
  //             mass: 4,
  //             friction: 10,
  //           }
  //         case 'position':
  //           return { mass: 1, friction: 100 }
  //         default:
  //           return {}
  //       }
  //     },
  //   }),
  //   []
  // )


    // const handleClick = () => {
    //     api.start({
    //       from: { position: [0, 0,0],rotation: [0, 0,0],},
    //       to: { position: [0, 3,0],rotation:[0,0,0] },
          
    //     })
    //   }
      
    //  const spring = useSpring({ scale: pressed ?  [2, 2, 2] :[1, 1, 1] ,
    //      config: config.wobbly })
  return (
    <group {...props} dispose={null}>
        <a.group >
            <mesh
                name="Mug"
                castShadow
                receiveShadow
                geometry={nodes.Mug.geometry}
                material={materials["Material.006"]}
            />
      </a.group>
    </group>
  );
}

useGLTF.preload("/3dModels/mug.glb");
