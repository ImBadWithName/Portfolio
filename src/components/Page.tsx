/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useMemo, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useGraph, useLoader } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.SkinnedMesh;
    Plane_1: THREE.SkinnedMesh;
    Bone: THREE.Bone;
    Bone002: THREE.Bone;
  };
  materials: {
    ImageMaterial: THREE.MeshStandardMaterial;
    PaperMaterial: THREE.MeshStandardMaterial;
  };
};

type ActionName = "Turning";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;
type Props = JSX.IntrinsicElements["group"] & {
  image:string;
  onTurned?:(i:number)=>void;
  turned?:boolean
}
export function Page(props: Props) {
  const [turned,setTurned]= useState(props.turned===true)
  const group = useRef<any>();
  const { scene, materials, animations } = useGLTF("/3dModels/Page.glb") as GLTFResult;
//   const { actions } = useAnimations<GLTFActions>(animations, group);
const {actions} = useAnimations(animations, group);
const imageTexture = useLoader(THREE.TextureLoader,props.image);
const speed = 1.8
const clone = useMemo(() => SkeletonUtils.clone(scene), [scene])
const {nodes} = useGraph(clone) as any
// if(actions.Turning){
//   actions.Turning.clampWhenFinished =true
//   actions.Turning.enabled=true
//   actions.Turning.setLoop(THREE.LoopOnce,0)
//   actions.Turning.setEffectiveTimeScale(turned?-speed:speed);
//   actions.Turning.time = turned? actions.Turning.getClip().duration:0; 
//   // actions.Turning.play()
// }
useEffect(() => {
  console.log(turned)
  if(actions.Turning){
    actions.Turning.clampWhenFinished =true
    actions.Turning.enabled=true
    actions.Turning.setLoop(THREE.LoopOnce,0)
    actions.Turning.setEffectiveTimeScale(turned?speed:-speed);
    actions.Turning.time =0.5; 
     actions.Turning.play()
  }
},[actions])

// useEffect(()=>{
//   if(actions.Turning){
//      if(!actions.Turning.isRunning()){
//         actions.Turning.reset()
//         actions.Turning.time = turned? actions.Turning.getClip().duration:0; 
//      }
//     actions.Turning.setEffectiveTimeScale(turned?-speed:speed);
//     console.log("hello")
//     actions.Turning.play()
//   }
// },[turned])
// const { actions } = useAnimations<any>(animations, group);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Page" onClick={()=>{setTurned(!turned)}}>
          <group name="Page001">
            <skinnedMesh
              name="Plane"
              geometry={nodes.Plane.geometry}
              material={materials.ImageMaterial}
              skeleton={nodes.Plane.skeleton}
            >
              <meshStandardMaterial
                map={imageTexture}
              />
            </skinnedMesh>
            <skinnedMesh
              name="Plane_1"
              geometry={nodes.Plane_1.geometry}
              material={materials.PaperMaterial}
              skeleton={nodes.Plane_1.skeleton}
            />
          </group>
          <primitive object={nodes.Bone} />
          <primitive object={nodes.Bone002} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/3dModels/Page.glb");
